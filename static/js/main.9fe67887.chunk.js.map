{"version":3,"sources":["utils.ts","components/Carousel.tsx","App.tsx","index.tsx"],"names":["setObjField","obj","objKey","newVal","Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","currentImgIndx","handleCurrentImgIndx","isPrevBtnDisabled","isNextBtnDisabled","length","className","style","width","borderRadius","map","image","indx","transform","transitionDuration","src","alt","type","cn","onClick","currentIndx","prevIndx","nextIndx","App","useState","carouselSettings","setCarouselSettings","setCurrentImgIndx","htmlFor","name","id","min","max","value","onChange","event","newItemWidth","Math","round","target","prev","newFrameSize","newStep","newAnimnDurn","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fe67887.chunk.js","sourcesContent":["export const nextIndx = (\n  currentIndx: number,\n  length: number,\n  step = 1,\n): number | undefined => {\n  if (currentIndx < 0\n    || length < 0\n    || step < 0) {\n    return undefined;\n  }\n\n  return (+currentIndx + step) % length;\n};\n\nexport const prevIndx = (\n  currentIndx: number,\n  length: number,\n  step = 1,\n): number | undefined => {\n  if (currentIndx < 0\n    || length < 0\n    || step < 0) {\n    return undefined;\n  }\n\n  return (+currentIndx + (length - step)) % length;\n};\n\nexport function setObjField<T1>(\n  obj: T1,\n  objKey: keyof T1,\n  newVal: any,\n): T1 {\n  return {\n    ...obj,\n    [objKey]: newVal,\n  };\n}\n","import React from 'react';\nimport cn from 'classnames';\n\nimport './Carousel.scss';\nimport { CarouselSettings } from '../types/CarouselSettings';\nimport { nextIndx, prevIndx } from '../utils';\n\ninterface Props extends CarouselSettings {\n  currentImgIndx: number;\n  handleCurrentImgIndx: (indx: number) => void;\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n  currentImgIndx,\n  handleCurrentImgIndx,\n}) => {\n  const isPrevBtnDisabled\n    = (currentImgIndx - step) < 0 && !infinite;\n  const isNextBtnDisabled\n    = (currentImgIndx + step) >= images.length && !infinite;\n\n  return (\n    <div className=\"Carousel\">\n      <ul\n        className=\"Carousel__list\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n          borderRadius: `${itemWidth * 0.5}px`,\n        }}\n      >\n        {\n          images.map((image, indx) => (\n            <li\n              key={image}\n              className=\"Carousel__item\"\n              style={{\n                transform: `translateX(-${itemWidth * currentImgIndx}px)`,\n                transitionDuration: `${animationDuration}ms`,\n              }}\n            >\n              <img\n                className=\"Carousel__image\"\n                src={image}\n                alt={`${indx + 1}`}\n                width={itemWidth}\n              />\n            </li>\n          ))\n        }\n      </ul>\n\n      <button\n        type=\"button\"\n        className={cn('Carousel__btn', {\n          'Carousel__btn--disabled': isPrevBtnDisabled,\n        })}\n        aria-disabled={false}\n        onClick={() => isPrevBtnDisabled\n          || handleCurrentImgIndx(\n            prevIndx(currentImgIndx, images.length, step) as number,\n          )}\n      >\n        Prev\n      </button>\n\n      <button\n        data-cy=\"next\"\n        type=\"button\"\n        className={cn('Carousel__btn', {\n          'Carousel__btn--disabled': isNextBtnDisabled,\n        })}\n        aria-disabled={false}\n        onClick={() => (isNextBtnDisabled\n          || handleCurrentImgIndx(\n            nextIndx(currentImgIndx, images.length, step) as number,\n          ))}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\nimport { CarouselSettings } from './types/CarouselSettings';\nimport { setObjField } from './utils';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nexport const App: React.FC = () => {\n  const [carouselSettings, setCarouselSettings] = useState<CarouselSettings>({\n    images,\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  });\n\n  const [currentImgIndx, setCurrentImgIndx] = useState(0);\n  const handleCurrentImgIndx\n    = (indx: number): void => {\n      if (indx < 0 || indx >= images.length) {\n        return;\n      }\n\n      setCurrentImgIndx(indx);\n    };\n\n  const onChangeItemWidth\n    = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const newItemWidth = Math.round(+(event.target.value));\n\n      if (newItemWidth < 130 || newItemWidth > 260) {\n        return;\n      }\n\n      setCarouselSettings(prev => setObjField(\n        prev,\n        'itemWidth',\n        newItemWidth,\n      ));\n    };\n\n  const onChangeFrameSize\n    = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const newFrameSize = Math.round(+(event.target.value));\n\n      if (newFrameSize < 0 || newFrameSize > carouselSettings.images.length) {\n        return;\n      }\n\n      setCarouselSettings(prev => setObjField(\n        prev,\n        'frameSize',\n        newFrameSize,\n      ));\n    };\n\n  const onChangeStep\n    = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const newStep = Math.round(+(event.target.value));\n\n      if (newStep < 0 || newStep > carouselSettings.images.length) {\n        return;\n      }\n\n      setCarouselSettings(prev => setObjField(\n        prev,\n        'step',\n        newStep,\n      ));\n    };\n\n  const onChangeAnimationDuration\n    = (event: React.ChangeEvent<HTMLInputElement>): void => {\n      const newAnimnDurn = Math.round(+(event.target.value));\n\n      if (newAnimnDurn < 500 || newAnimnDurn > 3000) {\n        return;\n      }\n\n      setCarouselSettings(prev => setObjField(\n        prev,\n        'animationDuration',\n        newAnimnDurn,\n      ));\n    };\n\n  const onChangeInfinite = (): void => {\n    setCarouselSettings(prev => setObjField(\n      prev,\n      'infinite',\n      !prev.infinite,\n    ));\n  };\n\n  return (\n    <div className=\"App\">\n      {/* eslint-disable-next-line */}\n      <h1 data-cy=\"title\" className=\"App__title\">Carousel with {images.length} images</h1>\n\n      <div className=\"App__inputs\">\n        <label\n          className=\"App__label\"\n          htmlFor=\"itemId\"\n        >\n          Item Width\n          <input\n            type=\"number\"\n            className=\"App__input\"\n            name=\"itemWidth\"\n            id=\"itemId\"\n            min={130}\n            max={260}\n            value={carouselSettings.itemWidth}\n            onChange={onChangeItemWidth}\n          />\n        </label>\n\n        <label\n          className=\"App__label\"\n          htmlFor=\"frameId\"\n        >\n          Frame Size\n          <input\n            type=\"number\"\n            className=\"App__input\"\n            name=\"frameSize\"\n            id=\"frameId\"\n            min={1}\n            max={images.length}\n            step={1}\n            value={carouselSettings.frameSize}\n            onChange={onChangeFrameSize}\n          />\n        </label>\n\n        <label\n          className=\"App__label\"\n          htmlFor=\"stepId\"\n        >\n          Step\n          <input\n            type=\"number\"\n            className=\"App__input\"\n            name=\"step\"\n            id=\"stepId\"\n            min={1}\n            max={images.length}\n            step={1}\n            value={carouselSettings.step}\n            onChange={onChangeStep}\n          />\n        </label>\n\n        <label className=\"App__label\">\n          Animation Duration\n          <input\n            type=\"number\"\n            className=\"App__input\"\n            name=\"animationDuration\"\n            id=\"animationDuration\"\n            min={500}\n            max={3000}\n            step={500}\n            value={carouselSettings.animationDuration}\n            onChange={onChangeAnimationDuration}\n          />\n        </label>\n\n        <label className=\"App__label\">\n          Infinite\n          <input\n            type=\"checkbox\"\n            className=\"App__input\"\n            name=\"infinite\"\n            id=\"infinite\"\n            onChange={onChangeInfinite}\n          />\n        </label>\n      </div>\n\n      <Carousel\n        images={carouselSettings.images}\n        step={carouselSettings.step}\n        frameSize={carouselSettings.frameSize}\n        itemWidth={carouselSettings.itemWidth}\n        animationDuration={carouselSettings.animationDuration}\n        infinite={carouselSettings.infinite}\n        currentImgIndx={currentImgIndx}\n        handleCurrentImgIndx={handleCurrentImgIndx}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}